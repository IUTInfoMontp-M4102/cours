extends coursXX.pug

append preamble
  -
    title = "Cours n°1<br><em>Threads</em>";
    page_title = "Cours n°1 - Threads";
    date = "2022-01-25";

block document
  section
    h1 Programmation répartie
    ul
      li Accès à des ressources communes par plusieurs processus simultanément (ex: CPU, fichier, réseau, etc.)
      p &rarr; organiser les accès
      .uncover
        li Dépendances entre différentes tâches (ex: action dépend du résultat d'un calcul, attente d'un événement réseau, etc.)
        p &rarr; synchroniser
      .uncover
        li Communication et coopération entre processus locaux ou distants (ex: échanger des données, stocker des résultats)
        p &rarr; établir des canaux de communication
      .uncover
        li Réduction du temps d'exécution en répartissant les calculs sur plusieurs processeurs/cœurs
        p &rarr; diviser et organiser le fonctionnement

  section
    h1 Contenu du cours
    ul
      li Processus et tâches
      li.uncover Utilisation concurrentielle des ressources
        ul
          li Problèmes liés à la concurrence
          li Ressources/sections critiques
          li Exclusion mutuelle
      li.uncover Outils
        ul
          li Verrous
          li Barrières
          li Sémaphores
      li.uncover Synchronisation des processus
      li.uncover Communication entre processus distants
        ul
          li Boîtes aux lettres
          li Sockets
          li Modèle client/serveur

  section
    .side
      h1 Concurrence
      ul
        li Intervalles d'exécution qui se chevauchent
        li Peut se faire avec un seul processeur
        li On peut simuler du parallélisme avec du <em>time slicing</em>
      br
      img(src="cours01/concurrent.png")

      br
      .uncover
        p Ex :
        ul
          li coroutines
          li interruptions et attente I/O
          li processus dans un système d'exploitation multi-tâches

    .side
      h1 Parallélisme
      ul
        li Exécutions simultanées
        li Nécessite plusieurs processeurs (un par tâche parallèle)
      br
      br
      img(src="cours01/parallel.png")

      .uncover(data-start="+0")
        br
        p Ex :
        ul
          li calculs parallèles sur réseau
          li processeur multi-cœurs
          li traitement d'images

  .section-counter
  section.section
    h1 Rappels

  section
    h1 Processus
    .side
      img(src="cours01/stack-process.svg")
    .side
      p Programme en cours d'exécution (un même programme peut être lancé plusieurs fois)
      br
      ul
        li Espace d'adressage propre (chaque processus a sa propre mémoire)
        li Deux processus peuvent être sur des machines différentes
        li Peut être interrompu et réactivé en sauvegardant son état

  section
    h1 <em>Thread</em>
    .side
      img(src="cours01/stack-thread.svg")
    .side
      p Processus légers : subdivisions d'un processus
      ul
        li Partagent l'espace mémoire
        li Chaque <em>thread</em> a son segment de pile
        li Threads d'un même processus partagent leur code
        li Peut être interrompu et réactivé en sauvegardant son état

  section
    h1 Communication entre processus
    p Processus ne partagent pas leurs variables
    p Plusieurs moyens pour communiquer (IPC) :
    ul
      li signaux
      li tubes anonymes (<em>pipes</em>)
      li FIFO (tubes nommés)
      li Files de messages
      li Verrous
      li Sémaphores
      li Segments de mémoire partagée
      li Fichiers sur mémoire
      li Sockets

  section
    h1 Cycle d'un processus
    .side
      img(src="cours01/cycle.svg" style="width: 100%" alt="cycle d'un processus")

    .side
      p Les processus ont 5 états possibles d'exécution :
      ul
        li <strong>Nouveau :</strong> en cours de création
        li <strong>Prêt :</strong> toutes les ressources nécessaires sont disponibles mais pas actuellement
          |  exécuté par le CPU
        li <strong>Exécution :</strong> en cours d'exécution par le CPU
        li <strong>En attente :</strong> ne peut pas poursuivre son exécution (attente clavier, fichier,
          |  message d'un autre processus, etc.)
        li <strong>Terminé :</strong> l'exécution est finie

  section
    h1 Exécution en Java
    .side
      .uncover
        pre
          code.java.
            public class Prog {
              public static void main(String[] args){
                ...
              }
            }
      .uncover
        pre
          code.bash.
            $ javac Prog.java
            $ ls
            Prog.class	Prog.java
          .uncover
            code.bash.
              $ java Prog &
              $ ps
               PID TTY        TIME CMD
              4232 ttys0   0:00.03 -bash
              4295 ttys0   0:00.04 /usr/bin/java Prog

    .side
      p Les programmes en Java sont exécutés par une machine virtuelle (JVM)
      br
      ul
        li.skip.uncover(data-start=1) Un programme est une classe (<code>.java</code>) avec une méthode statique <code>main</code>
        li.skip.uncover Compilation produit un fichier en langage machine de la JVM (<code>.class</code>)
        li.uncover À l'exécution : nouveau processus qui <em>exécute</em> la JVM qui <em>interprète</em> le code compilé

  .section-counter
  section.section
    h1 Processus légers<br>en Java

  section
    h1 Processus légers en Java
    p Gérés par la classe <code>Thread</code>
    p Peuvent être créés
    ul
      li en héritant de la classe <code>Thread</code>
      li en implémentant l'interface <code>Runnable</code>

  section
    h1 Héritage de <em>Thread</em>
    .side
      pre
        code.java.
          public class Tache extends Thread {
            ...

            public void run() {
              ...   // activité du Thread
            }
          }
      .uncover
        pre
          code.java.
            Tache t = new Tache(...);
            t.start();
    .side
      ul
        li Classes qui héritent de <code>Thread</code> doivent surcharger la méthode <code>run()</code>
        li.uncover(data-start=1) Les <em>threads</em> sont lancés avec la méthode <code>start()</code> (héritée de <code>Thread</code>)
        .uncover
          li Lorsque le <em>thread</em> s'exécute, la JVM exécute la méthode <code>run()</code>
          li Le <em>thread</em> se termine lorsque <code>run()</code> termine
      br
      p.uncover <strong>Rmq :</strong> Après l'appel à <code>start()</code> le <em>thread</em> est <em>prêt</em> mais ne démarre pas nécessairement immédiatement

  section
    h1 Exemple
    pre
      code.java
        include cours01/TacheThread.java

  section
    h1 Implémentation de <em>Runnable</em>
    .side
      pre
        code.java.
          public class Tache implements Runnable {
            ...

            public void run() {
              ...   // activité du Thread
            }
          }
      pre
        code.java.uncover.
          Tache t = new Tache(...);
          Thread th = new Thread(t);
          th.start();
    .side
      ul
        li L'interface <code>Runnable</code> requiert uniquement une méthode <code>void run()</code>
        p <strong>Rmq :</strong> Cette classe n'est pas un <code>Thread</code>
        li.uncover(data-start=1) La classe <code>Thread</code> a un constructeur qui prend en argument un <code>Runnable</code>
        li.uncover On appelle la méthode <code>start()</code> du <em>thread</em> pour l'exécuter

  section
    h1 Exemple
    pre
      code.java
        include cours01/TacheRunnable.java

  section
    h1 Méthodes de la classe <em>Thread</em>
    p La classe <code>Thread</code> contient des méthodes pour contrôler les <em>threads</em>
    br
    ul
      li.skip
        code.java static void sleep(long millis)
        p Bloque le <em>thread</em> pendant <em>millis</em> millisecondes
        p <strong>Rmq :</strong> c'est une méthode <em>statique</em>
      li.skip
        code.java boolean isAlive()
        p Renvoie <em>true</em> si le <em>thread</em> est encore en cours d'exécution
      li
        code.java Thread.State getState()
        p Renvoie l'état d'exécution du <em>thread</em> (<code>NEW</code>, <code>RUNNABLE</code>, <code>BLOCKED</code>, <code>WAITING</code>, <code>TIMED_WAITING</code> ou <code>TERMINATED</code>)

  section
    h1 Méthodes de la classe <em>Thread</em>
    ul
      li.skip
        code.java int getPriority()
        br
        code.java int setPriority(int newPriority)
        p Gère la priorité d'exécution du <em>thread</em>
        p (<code>MIN_PRIORITY</code>, <code>MAX_PRIORITY</code> ou <code>NORM_PRIORITY</code>)
        p <strong>Rmq :</strong> priorité haute &rarr; plus de chances d'être exécuté (mais pas de garantie)
      li
        code.java static void yield()
        p Le <em>thread</em> passe automatiquement de l'état <em>running</em> à <em>runnable</em> (laisse la main)

  section
    h1 <em>Threads</em> et programme principal
    .side
      pre.only(data-step=0)
        code.c.
          int main() {
            pthread_t th;
            pthread_create(&th, NULL, f, NULL);
            ...
            pthread_join(th, NULL); // attend
            exit(0);
          }
      .only
        pre
          code.java.
            public class Tache extends Thread {
              public void run() {
                for (int i = 0; i < 5; i++) {
                  System.out.printf("%d ", i);
                }
              }

              public static void main(String[] args){
                Tache t1 = new Tache();
                Tache t2 = new Tache();
                System.out.println("Début");
                t1.start(); t2.start();
                System.out.println("Fin");
              }
            }
        pre
          code.bash.
            $ java Tache
            Début
            Fin
            0 1 2 3 4 0 1 2 3 4
      .only
        pre
          code.java
            | public class Tache extends Thread {
            |   public void run() {
            |     for (int i = 0; i &lt; 5; i++) {
            |       System.out.printf("%d ", i);
            |     }
            |   }
            |
            |   public static void main(String[] args) {
            |     Tache t1 = new Tache();
            |     Tache t2 = new Tache();
            |     System.out.println("Début");
            |     t1.start(); t2.start();
            |     <span class="highlight">t1.join(); t2.join();</span>
            |     System.out.println("\nFin");
            |   }
            | }
        pre
          code.bash.
            $ java Tache
            Début
            0 1 2 3 4 0 1 2 3 4
            Fin
    .side
      .only(data-step=0)
        p En C quand le programme principal (<code>main</code>) termine, le processus se termine
        br
        p &rarr; Pour attendre la fin d'un <em>thread</em> il faut utiliser la fonction <code>join</code>
      .only(data-start=1)
        p En Java les <em>threads</em> ne sont pas interrompus quand le programme principal termine
        br
        p &rarr; Le programme termine quand tous les <em>threads</em> lancés sont terminés
        br
        .uncover
          p On peut attendre la fin d'exécution d'un <em>thread</em> avec <code>join</code>

  section
    h1 Partage de variables
    p Les <em>threads</em> d'un même processus partagent la mémoire
    ul
      li accèdent aux mêmes variables globales
      li ont leur propre pile (variables locales)
      li les classes ne sont chargées qu'une fois (communes pour tous les <em>threads</em>) mais les instances peuvent être propres à chaque <em>thread</em>

  section
    h1 Exemple
    .side
      pre
        code.java.
          public class Tache extends Thread {
            private static int compteur = 0;

            public void run() {
              for (int i = 0; i < 100000; i++) {
                compteur++;
              }
            }

            public static void main(String[] args) {
              Tache t1 = new Tache();
              Tache t2 = new Tache();
              t1.start(); t2.start();
              try {
                t1.join(); t2.join();
              } catch (InterruptedException e) {
              }
              System.out.println(compteur);
            }
          }
    .side
      .only
        pre
          code.bash.
            $ javac Tache.java
            $ java Tache
            122513
            $ java Tache
            102498
        p &rarr; Le résultat est bien en-dessous du résultat attendu (200000)
      .only(data-start=2)
        ul
          .uncover(data-start="+0")
            li Les opérations sur <code>compteur</code> ne sont pas <em>atomiques</em>
            pre.only(data-step="+0")
              code.java compteur++;
            pre.only(data-start="+1")
              code.
                1. mov &cpt reg   // lire compteur
                2. inc reg        // incrémenter registre
                3. mov reg &cpt   // écrire compteur
          .uncover
            li Les <em>threads</em> sont interrompus par l'ordonnanceur en cours d'exécution, puis réactivés
          .uncover
            li Si un <em>thread</em> est interrompu <strong>entre la lecture et l'écriture</strong>, les modifications de l'autre <em>thread</em> sont perdues

  section
    h1 Ordonnancement
    p Il existe un <em>ordonnanceur</em> (<em>scheduler</em>) qui gère les processus et les <em>threads</em>
    br
    ul
      li file d'attente contenant les tâches qui peuvent s'exécuter (<em>runnable</em>)
      ul
        li initialisées
        li interrompues
        li débloquées
      .uncover
        li différentes politiques de gestion de file
        ul
          li tourniquet (<em>fair play</em>)
          li priorités
          li temps d'attente
          li etc.

  section
    h1 Ordonnancement
    ul
      li Le <em>thread</em> Java à exécuter est choisi parmi les <em>threads</em> qui sont éligibles
      li L'ordonnanceur Java est
      ul
        li <em>préemptif</em> (l’ordonnanceur peut interrompre une tâche pour donner les ressources à une autre tâche
        li basé sur une priorité (essaye de donner les ressources à une tâche prioritaire)

    br
    ul
      li L'ordonnanceur dépend de l'implémentation de JVM
      ul
        li <em>green thread</em> : c’est la JVM qui implémente l’ordonnancement
        li <em>thread natif</em> :c’est le système d’exploitation hôte qui effectue l’ordonnancement

  section
    h1 <em>Thread Pool</em>
    p Le système gère les tâches selon sa propre politique et selon l’état des tâches
    br
    ul
      li Un nombre important de threads peut encombrer la JVM
      li On peut avoir besoin des gestionnaires différents
      li Créer des ensembles de threads, gérés par un gestionnaire à part : <em>thread pools</em>

  section
    h1 Gestionnaires de tâches
    p Il est possible de créer des gestionnaires de tâches qui gèrent un ensemble de tâches
    ul
      li La politique et la gestion des <em>threads</em> sont paramétrables
      li Les comportements sont définis par les interfaces
    br

    .center-v(style={height: "14em"})
      pre.only(data-step=0)
        code.java.
          import java.util.concurrent.Executor
          import java.util.concurrent.ExecutorService

          Interface Executor                    // pour Runnable
          Interface ExecutorService             // pour Runnable et Callable
          Interface ScheduledExecutorService    // pour exécution périodique
      img.only(src="cours01/executor.png")

  section
    h1 Interface <em>Executor</em>
    .side
      p Un <code>Executor</code> gère une file d’attente bloquante de tâches à effectuer
      br
      ul
        li Idée : dissocier la soumission et l'exécution des tâches
        li Une seule méthode dans l’interface :
          p
            code.java void execute(Runnable command)
        li La tâche peut être exécutée dans un <em>thread</em> dédié ou dans le <em>thread</em> courant
      br
      p &rarr;
        a(href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/Executor.html") Documentation

    .side
      .uncover
        p Ex 1 : exécution dans le <em>thread</em> principal
        pre
          code.java.
            class MonExecutor1 implements Executor {
              public void execute(Runnable cmd) {
                cmd.run();
              }
            }
      .uncover
        hr
        p Ex 2 : exécution dans un <em>thread</em> séparé
        pre
          code.java.
            class MonExecutor2 implements Executor {
              public void execute(Runnable cmd) {
                new Thread(cmd).start();
              }
            }

  section
    h1 Interface <em>ExecutorService</em>
    .only(data-start=0 data-end=1)
      p Ajoute des fonctionnalités
      ul
        li Durée de vie du gestionnaire
        ul
          li
            code.java boolean isTerminated()
          li
            code.java boolean awaitTermination(long timeout, TimeUnit unit)
          li
            code.java void shutdown()
          li
            code.java List&lt;Runnable> shutdownNow()
          .uncover
            li Les tâches peuvent renvoyer un résultat (<code>Callable</code> au lieu de <code>Runnable</code>)
            ul
              li
                code.java Future&lt;T> submit(Callable&lt;T> task)
      br
      p &rarr;
        a(href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/ExecutorService.html") Documentation


    .only
      p Implémentations
      ul
        li
          code.java public abstract class AbstractExecutorService
        li
          code.java public class ThreadPoolExecutor extends AbstractExecutorService
          p Limite sur le nombre de <em>threads</em>
          .center
            img(style={width: "50%"} src="cours01/thread_pool.png")

  section
    h1 La fabrique <em>Executors</em>
    p Sert à instancier des <code>Executor</code>
    pre
      code.java.
        import java.util.concurrent.Executors

        static ExecutorService newSingleThreadExecutor()
        static ExecutorService newFixedThreadPool(int nThreads)
        static ScheduledExecutorService newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)
    br
    p &rarr;
      a(href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/Executors.html") Documentation

  section
    h1 Exemple
    .only(data-step=0)
      pre
        code.java
          include cours01/MaTache.java
    .only
      pre
        code.java
          include cours01/MonExecutor.java
    .only
      pre
        code.
          $ java MonExecutor
          Tache 1  0
          Tache 1  1
          Tache 1  2
          Tache 1  3
          Tache 1  4
          Tache 2   0
          Tache 2   1
          Tache 2   2
          Tache 2   3
          Tache 2   4


      p &rarr; Les tâches sont appelées séquentiellement dans un nouveau <em>thread</em>
    .only
      pre
        code.java
          include cours01/MonExecutor2.java
    .only
      pre
        code.
          $ java MonExecutor
          Tache 1  0
          Tache 2   0
          Tache 1  1
          Tache 2   1
          Tache 2   2
          Tache 1  2
          Tache 2   3
          Tache 1  3
          Tache 1  4
          Tache 2   4
          Tache 3    0
          Tache 3    1
          Tache 3    2
          Tache 3    3
          Tache 3    4
      p &rarr; Les tâches 1 et 2 sont exécutées en même temps. La tâche 3 s'exécute lorsqu'une place est libre.

  section
    h1 L'interface <em>Callable</em>
    .side
      p Interface <code>Runnable</code> :
      br
      ul
        li dans <code>java.lang</code>
        li <code class="java">void run()</code> ne renvoie aucune valeur
        li Ne peut pas lever d'exceptions
      br
      p &rarr;
        a(href="https://docs.oracle.com/javase/10/docs/api/java/lang/Runnable.html") Documentation

    .side
      .uncover
        p Interface <code>Callable&lt;V></code>
        ul
          li dans <code>java.util.concurrent</code>
          li
            code.java public V call() throws Exception
          li Renvoie un résultat de type <code>V</code> (générique)
        br
        p &rarr;
          a(href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/Callable.html") Documentation

  section
    h1 Exemple
    pre
      code.java
        include cours01/MonCallable.java

  section
    h1 Gestionnaires et <em>Callable</em>
    p On peut utiliser un <code>ExecutorServices</code> pour soumettre des <code>Callable</code> :
    ul
      li
        code.java Future&lt;T> submit (Callable&lt;T> task)

    pre
      code.java.
        public class Main {
          public static void main(String[] args) {
            ExecutorService ex = Executors.newSingleThreadExecutor();
            Future<Integer> res = ex.submit(new MonCallable());

            ...

            ex.shutdown();
          }
        }

  section
    h1 Le type <em>Future&lt;V></em>
    p L'interface générique <code>Future&lt;V></code> représente un résultat de type <code>V</code> qui n'est pas encore calculé
    ul
      li
        code.java boolean	cancel (boolean mayInterruptIfRunning)
        p Annule la tâche en cours
      li
        code.java V	get()
        p Bloque jusqu'à complétion de la tâche et renvoie le résultat
      li
        code.java V	get (long timeout, TimeUnit unit)
        p Limite sur le temps d'attente
      li
        code.java boolean	isCancelled()
        p Indique si la tâche a été annulée
      li
        code.java boolean	isDone()
        p Indique si le résultat est disponible


    br
    p &rarr;
      a(href="https://docs.oracle.com/javase/10/docs/api/java/util/concurrent/Future.html") Documentation

  section
    h1 Exemple
    .only(data-step=0)
      pre
        code.java
          include cours01/MonCallableMain.java
    .only
      pre
        code.
          $ java MonCallableMain
          Attente du résultat...
          Attente du résultat...
          Attente du résultat...
          Résultat : 42